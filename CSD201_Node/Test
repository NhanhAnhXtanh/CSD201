//merge deletion
    public void deleteByMerging(int x) {  // merging Left
        //bên trái delNode thế delNode bên phải delNode gán vào bên phải ngoài cùng của Node gán
        //check if BSTree is emptys
        if (isEmpty()) {
            System.out.println("BSTree is emplty, no deletion");
            return;
        }

        //search node to be delete
        Node deleteNode;
        Node parentOfDeleteNode;
        deleteNode = root;
        parentOfDeleteNode = null;
        while (deleteNode != null) {
            if (deleteNode.info == x) {
                break; // found x
            }

            //continue search
            if (x < deleteNode.info) {
                parentOfDeleteNode = deleteNode;
                deleteNode = deleteNode.left;
            } else {
                parentOfDeleteNode = deleteNode;
                deleteNode = deleteNode.right;
            }
        }

        //check if found x
        if (deleteNode == null) {
            System.out.println("The key " + x + " does not exist, no deltion");
            return;
        }

        // Case 1: delete leaf node
        if (deleteNode.left == null && deleteNode.right == null) {
            //check if deleteNode is root(root là lá thì xóa lá)
            if (parentOfDeleteNode == null) {
                root = null;
            } else {
                if (parentOfDeleteNode.left == deleteNode) {
                    parentOfDeleteNode.left = null;
                } else {
                    parentOfDeleteNode.right = null;
                }
            }
            return;
        }

        // Case 2: delete node having only left child 
        if (deleteNode.left != null && deleteNode.right == null) {
            //check if deleteNode is root
            if (parentOfDeleteNode == null) {
                root = deleteNode.left;
            } else {
                if (parentOfDeleteNode.left == deleteNode) {
                    parentOfDeleteNode.left = deleteNode.left;
                } else {
                    parentOfDeleteNode.right = deleteNode.left;
                }
            }
            deleteNode.left = null;
            return;
        }

        //Case 3: delete node having only right child
        if (deleteNode.left == null && deleteNode.right != null) {
            //check if deleteNode is root
            if (parentOfDeleteNode == null) {
                root = deleteNode.right;
            } else {
                if (parentOfDeleteNode.left == deleteNode) {
                    parentOfDeleteNode.left = deleteNode.right;
                } else {
                    parentOfDeleteNode.right = deleteNode.right;
                }
            }
            deleteNode.right = null;
            return;
        }

        //Case 4: delete node having both left and right children
        if (deleteNode.left != null && deleteNode.right != null) {
            Node rightOfDeleteNode;
            Node replaceNode;  // the right most noe - this will replace deleteNode

            // find the right most node on the left sub-tree of deleteNode
            rightOfDeleteNode = deleteNode.right;
            replaceNode = deleteNode.left;
            while (replaceNode.right != null) {
                replaceNode = replaceNode.right;
            }

            replaceNode.right = rightOfDeleteNode;
            deleteNode.right = null;
            // now deleteNode has only left child

            // check if deleteNode is root
            if (parentOfDeleteNode == null) {
                root = deleteNode.left;
            } else {
                if (parentOfDeleteNode.left == deleteNode) {
                    parentOfDeleteNode.left = deleteNode.left;
                } else {
                    parentOfDeleteNode.right = deleteNode.left;
                }
            }
            deleteNode.left = null;
            return;
        }
    }
